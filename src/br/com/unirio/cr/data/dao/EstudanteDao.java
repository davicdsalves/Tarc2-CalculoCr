package br.com.unirio.cr.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import br.com.unirio.cr.data.DaoSession;
import br.com.unirio.cr.data.model.Estudante;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ESTUDANTE.
*/
public class EstudanteDao extends AbstractDao<Estudante, Long> {

    public static final String TABLENAME = "ESTUDANTE";

    /**
     * Properties of entity Estudante.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Matricula = new Property(1, Long.class, "matricula", false, "MATRICULA");
        public final static Property CargaDoCurso = new Property(2, Long.class, "cargaDoCurso", false, "CARGA_DO_CURSO");
        public final static Property CargaCumprida = new Property(3, Long.class, "cargaCumprida", false, "CARGA_CUMPRIDA");
        public final static Property CargaAcumulada = new Property(4, Double.class, "cargaAcumulada", false, "CARGA_ACUMULADA");
    };


    public EstudanteDao(DaoConfig config) {
        super(config);
    }
    
    public EstudanteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ESTUDANTE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MATRICULA' INTEGER," + // 1: matricula
                "'CARGA_DO_CURSO' INTEGER," + // 2: cargaDoCurso
                "'CARGA_CUMPRIDA' INTEGER," + // 3: cargaCumprida
                "'CARGA_ACUMULADA' DOUBLE);"); // 4: cargaAcumulada
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ESTUDANTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Estudante entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long matricula = entity.getMatricula();
        if (matricula != null) {
            stmt.bindLong(2, matricula);
        }
 
        Long cargaDoCurso = entity.getCargaDoCurso();
        if (cargaDoCurso != null) {
            stmt.bindLong(3, cargaDoCurso);
        }
 
        Long cargaCumprida = entity.getCargaCumprida();
        if (cargaCumprida != null) {
            stmt.bindLong(4, cargaCumprida);
        }
 
        Double cargaAcumulada = entity.getCargaAcumulada();
        if (cargaAcumulada != null) {
            stmt.bindDouble(5, cargaAcumulada);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Estudante readEntity(Cursor cursor, int offset) {
        Estudante entity = new Estudante( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // matricula
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // cargaDoCurso
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cargaCumprida
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // cargaAcumulada
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Estudante entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMatricula(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCargaDoCurso(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCargaCumprida(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCargaAcumulada(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Estudante entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Estudante entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
