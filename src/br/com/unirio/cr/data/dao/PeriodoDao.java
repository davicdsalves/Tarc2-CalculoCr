package br.com.unirio.cr.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import br.com.unirio.cr.data.DaoSession;
import br.com.unirio.cr.data.model.Periodo;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERIODO.
*/
public class PeriodoDao extends AbstractDao<Periodo, Long> {

    public static final String TABLENAME = "PERIODO";

    /**
     * Properties of entity Periodo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Matricula = new Property(1, Long.class, "matricula", false, "MATRICULA");
        public final static Property Numero = new Property(2, Integer.class, "numero", false, "NUMERO");
        public final static Property Nota = new Property(3, Double.class, "nota", false, "NOTA");
        public final static Property Creditos = new Property(4, Integer.class, "creditos", false, "CREDITOS");
    };


    public PeriodoDao(DaoConfig config) {
        super(config);
    }
    
    public PeriodoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERIODO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MATRICULA' INTEGER," + // 1: matricula
                "'NUMERO' INTEGER," + // 2: numero
                "'NOTA' DOUBLE," + // 3: nota
                "'CREDITOS' INTEGER);"); // 4: creditos
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERIODO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Periodo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long matricula = entity.getMatricula();
        if (matricula != null) {
            stmt.bindLong(2, matricula);
        }
 
        Integer numero = entity.getNumero();
        if (numero != null) {
            stmt.bindLong(3, numero);
        }

        Double nota = entity.getNota();
        if (nota != null) {
            stmt.bindDouble(4, nota);
        }

        Long creditos = entity.getCreditosPeriodo();
        if (creditos != null) {
            stmt.bindLong(5, creditos);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Periodo readEntity(Cursor cursor, int offset) {
        Periodo entity = new Periodo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // matricula
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // numero
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // numero
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // numero
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Periodo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMatricula(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNumero(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNota(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCreditosPeriodo(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Periodo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Periodo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
