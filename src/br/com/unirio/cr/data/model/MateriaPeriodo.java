package br.com.unirio.cr.data.model;

import br.com.unirio.cr.data.DaoSession;
import br.com.unirio.cr.data.dao.MateriaDao;
import br.com.unirio.cr.data.dao.MateriaPeriodoDao;
import br.com.unirio.cr.data.dao.PeriodoDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MATERIA_PERIODO.
 */
public class MateriaPeriodo {

    private Long subjectId;
    private Long periodId;
    private Double nota;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MateriaPeriodoDao myDao;

    private Materia materia;
    private Long materia__resolvedKey;

    private Periodo periodo;
    private Long periodo__resolvedKey;


    public MateriaPeriodo() {
    }

    public MateriaPeriodo(Long subjectId, Long periodId, Double nota) {
        this.subjectId = subjectId;
        this.periodId = periodId;
        this.nota = nota;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMateriaPeriodoDao() : null;
    }

    public Long getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(Long subjectId) {
        this.subjectId = subjectId;
    }

    public Long getPeriodId() {
        return periodId;
    }

    public void setPeriodId(Long periodId) {
        this.periodId = periodId;
    }

    public Double getNota() {
        return nota;
    }

    public void setNota(Double nota) {
        this.nota = nota;
    }

    /** To-one relationship, resolved on first access. */
    public Materia getMateria() {
        Long __key = this.subjectId;
        if (materia__resolvedKey == null || !materia__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MateriaDao targetDao = daoSession.getMateriaDao();
            Materia materiaNew = targetDao.load(__key);
            synchronized (this) {
                materia = materiaNew;
            	materia__resolvedKey = __key;
            }
        }
        return materia;
    }

    public void setMateria(Materia materia) {
        synchronized (this) {
            this.materia = materia;
            subjectId = materia == null ? null : materia.getId();
            materia__resolvedKey = subjectId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Periodo getPeriodo() {
        Long __key = this.periodId;
        if (periodo__resolvedKey == null || !periodo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PeriodoDao targetDao = daoSession.getPeriodoDao();
            Periodo periodoNew = targetDao.load(__key);
            synchronized (this) {
                periodo = periodoNew;
            	periodo__resolvedKey = __key;
            }
        }
        return periodo;
    }

    public void setPeriodo(Periodo periodo) {
        synchronized (this) {
            this.periodo = periodo;
            periodId = periodo == null ? null : periodo.getId();
            periodo__resolvedKey = periodId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
